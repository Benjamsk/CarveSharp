<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeFullToolkit</name>
    </assembly>
    <members>
        <member name="T:CodeFull.Controls.GLViewport3D">
            <summary>
            A viewport control is able to render and manipulate Drawable instances in OpenGL.
            This control tries to mimic the functionality of WPF's Viewport3D control.
            </summary>
        </member>
        <member name="F:CodeFull.Controls.GLViewport3D.fps">
            <summary>
            Underlying storage for the FPS property.
            </summary>
        </member>
        <member name="F:CodeFull.Controls.GLViewport3D.selectedDrawable">
            <summary>
            Underlying storage for the SelectedDrawable property.
            </summary>
        </member>
        <member name="F:CodeFull.Controls.GLViewport3D.arcball">
            <summary>
            The arcball instance that controls the transformations of the drawables
            inside this viewport
            </summary>
        </member>
        <member name="F:CodeFull.Controls.GLViewport3D.drawCallTimer">
            <summary>
            The timer that controls the drawing commands
            </summary>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.SetupRenderTimer">
            <summary>
            Sets up the timer that places the render calls to the renderer.
            </summary>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.CreateProjectionMatrix">
            <summary>
            Creates the projection matrix based on the control setup.
            </summary>
            <returns>The projection matrix</returns>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.Render">
            <summary>
            Is called when it is time to render the objects in this viewport.
            </summary>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.GLViewport3D_Load(System.Object,System.EventArgs)">
            <summary>
            Load event handler
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The parameters</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.drawCallTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Draw timer event handler
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The parameters</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.GLViewport3D_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event handler
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The parameters</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.GLViewport3D_Resize(System.Object,System.EventArgs)">
            <summary>
            Resize event handler
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The parameters</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.GLViewport3D_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown event handler
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The parameters</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.GLViewport3D_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp event handler
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The parameters</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Command key handler
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseClick event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDoubleClick event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnStylusDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the StylusDown event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnStylusUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the StylusUp event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnStylusMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the StylusMove event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnStylusClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the StylusClick event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnStylusDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the StylusDoubleClick event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnTouchDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the TouchDown event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnTouchUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the TouchUp event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnTouchMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the TouchMove event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnTouchClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the TouchClick event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.OnTouchDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the TouchDoubleClick event
            </summary>
            <param name="e">The event argument</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.HandleKeyboard(System.Windows.Forms.Keys)">
            <summary>
            Handles various keyboard keypresses for object manipulation
            </summary>
            <param name="keyData">The key that is pressed</param>
        </member>
        <member name="M:CodeFull.Controls.GLViewport3D.Pick(System.Drawing.Point)">
            <summary>
            Performs picking and changes the SelectedDrawable property based on
            the drawable that was under the mouse cursor.
            </summary>
            <param name="mouseLocation">The cursor location</param>
        </member>
        <member name="P:CodeFull.Controls.GLViewport3D.Camera">
            <summary>
            The viewport's camera
            (defaults:      Position:    0, 0, 5
                            LookAt:      0, 0, 0
                            Up:          0, 1, 0
                            FieldOfView: 45)
            </summary>
        </member>
        <member name="P:CodeFull.Controls.GLViewport3D.ArcballSensitivity">
            <summary>
            Gets or sets the arcball sensitivity for manipulating drawables in this viewport
            </summary>
        </member>
        <member name="P:CodeFull.Controls.GLViewport3D.ClearColor">
            <summary>
            The clear color used as the background of this OpenGL control
            (Defaults to white)
            </summary>
        </member>
        <member name="P:CodeFull.Controls.GLViewport3D.Children">
            <summary>
            The objects that this viewport will display
            </summary>
        </member>
        <member name="P:CodeFull.Controls.GLViewport3D.SelectedDrawable">
            <summary>
            The currently selected drawable of this viewport. This drawable will be manipulated
            </summary>
        </member>
        <member name="P:CodeFull.Controls.GLViewport3D.FPS">
            <summary>
            Gets or sets the maximum framerate of the OpenGL renderer
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.SelectedDrawableChanged">
            <summary>
            Event raised when the selected drawble of this viewport has changed.
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.StylusDown">
            <summary>
            Event raised when stylus down occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.StylusUp">
            <summary>
            Event raised when stylus up occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.StylusMove">
            <summary>
            Event raised when stylus move occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.StylusClick">
            <summary>
            Event raised when stylus click occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.StylusDoubleClick">
            <summary>
            Event raised when stylus double click occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.TouchDown">
            <summary>
            Event raised when Touch down occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.TouchUp">
            <summary>
            Event raised when Touch up occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.TouchMove">
            <summary>
            Event raised when Touch move occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.TouchClick">
            <summary>
            Event raised when Touch click occurs
            </summary>
        </member>
        <member name="E:CodeFull.Controls.GLViewport3D.TouchDoubleClick">
            <summary>
            Event raised when Touch double click occurs
            </summary>
        </member>
        <member name="T:CodeFull.Controls.SelectedDrawableChangedEventHandler">
            <summary>
            The delegate to use for the GLViewport3D SelectedDrawableChanged event
            </summary>
        </member>
        <member name="T:CodeFull.Controls.SelectedDrawableChangedEventArgs">
            <summary>
               GLViewport3DSelectedDrawableChangedEventArgs
            </summary>
        </member>
        <member name="M:CodeFull.Controls.SelectedDrawableChangedEventArgs.#ctor(CodeFull.Graphics3D.Drawable3D)">
            <summary>
            Instantiates a new event argument with the specified drawable.
            </summary>
            <param name="drawable">The drawable of this event.</param>
        </member>
        <member name="P:CodeFull.Controls.SelectedDrawableChangedEventArgs.Drawable">
            <summary>
            Gets the drawable associated with this event.
            </summary>
        </member>
        <member name="T:CodeFull.Controls.StylusEventHandler">
            <summary>
            The delegate to use for the GLViewport3D stylus events
            </summary>
        </member>
        <member name="T:CodeFull.Controls.TouchEventHandler">
            <summary>
            The delegate to use for the GLViewport3D touch events
            </summary>
        </member>
        <member name="T:CodeFull.Extensions.Extensions">
            <summary>
            Provides various utility extensions methods
            </summary>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.Lerp(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Linearly interpolates between the current color and the target color
            </summary>
            <param name="current">The current color</param>
            <param name="target">The target color to interpolate to</param>
            <param name="lambda">The interpolation value (must be between 0 and 1)</param>
            <returns>A color that is between the current and the target color</returns>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.ToBlittableArray(OpenTK.Vector3d)">
            <summary>
            Converts this Vector3d instance to a sequential array of doubles.
            Usefull for serializing for compute kernels.
            </summary>
            <param name="vector"></param>
            <returns>A double[] array containing X, Y and Z components sequentially.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.Distance(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Computes the Euclidean distance between this vector and another vector
            </summary>
            <param name="a">This vector</param>
            <param name="b">The other vector</param>
            <returns>The Euclidean distance between the two vectors.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.DistanceSquared(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Computes the squared Euclidean distance between this vector and another vector
            </summary>
            <param name="a">This vector</param>
            <param name="b">The other vector</param>
            <returns>The squared Euclidean distance between the two vectors.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.Distance(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Computes the Euclidean distance between this vector and another vector
            </summary>
            <param name="a">This vector</param>
            <param name="b">The other vector</param>
            <returns>The Euclidean distance between the two vectors.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.Cross(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Computes the cross product of the current vector with another vector.
            </summary>
            <param name="a">The current vector</param>
            <param name="b">The other vector</param>
            <returns>A vector that is the result of the cross product.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.Cross(OpenTK.Vector2d,OpenTK.Vector2d)">
            <summary>
            Computes the cross product of the current vector with another vector.
            </summary>
            <param name="a">The current vector</param>
            <param name="b">The other vector</param>
            <returns>The result of the cross product</returns>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.Dot(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Computes the dot product of the current vector with another vector.
            </summary>
            <param name="a">The current vector</param>
            <param name="b">The other vector</param>
            <returns>The result of the dot product between the two vectors.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Extensions.CalculateAngle(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Calculates the angle between the current vector and the other vector (in radians).
            This does not have the NaN issue of the OpenTK release (as mentioned in :
            http://www.opentk.com/node/2585)
            </summary>
            <param name="a">This vector.</param>
            <param name="other">The other vector.</param>
            <returns>The angle between the currect vector and the other one.</returns>
        </member>
        <member name="T:CodeFull.Extensions.MouseEventSource">
            <summary>
            The sources of the input event that is raised and is generally
            recognized as mouse events.
            </summary>
        </member>
        <member name="F:CodeFull.Extensions.MouseEventSource.Mouse">
            <summary>
            Events raised by the mouse
            </summary>
        </member>
        <member name="F:CodeFull.Extensions.MouseEventSource.Stylus">
            <summary>
            Events raised by a stylus
            </summary>
        </member>
        <member name="F:CodeFull.Extensions.MouseEventSource.Touch">
            <summary>
            Events raised by touching the screen
            </summary>
        </member>
        <member name="T:CodeFull.Extensions.Helpers">
            <summary>
            Provides various helper methods.
            </summary>
        </member>
        <member name="F:CodeFull.Extensions.Helpers.EPSILON">
            <summary>
            Small epsilon value
            </summary>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetMessageExtraInfo">
            <summary>
            Gets the extra information for the mouse event.
            </summary>
            <returns>The extra information provided by Windows API</returns>
        </member>
        <member name="F:CodeFull.Extensions.Helpers.Jan1st1970">
            <summary>
            Jan, 1st, 1970 timestamp
            </summary>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetMouseEventSource">
            <summary>
            Determines what input device triggered the last mouse event.
            (Source: https://msdn.microsoft.com/en-us/library/ms703320.aspx)
            </summary>
            <returns>
            A result indicating whether the last mouse event was triggered
            by a touch, pen or the mouse.
            </returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.CurrentTimeMillis">
            <summary>
            Computes the timestamp based on the number of milliseconds passed
            since 01/01/1970
            </summary>
            <returns>The number of milliseconds passed since 01/01/1970</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.UnProject(System.Drawing.Point,System.Double)">
            <summary>
            Unprojects the specified point on the screen with the specified depth
            to the 3D space.
            </summary>
            <param name="screenLocation">The point on the screen</param>
            <param name="depth">The depth value in the range [0, 1] (near to far)</param>
            <returns>The corresponding 3D point on the screen</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.ScreenToWorldPoint(System.Drawing.Point,OpenTK.Vector3d@)">
            <summary>
            Converts the specified screen point (in window coordinates -- origin at top left)
            to a world point in the OpenGL space.
            </summary>
            <param name="screenPoint">The screen point in the window coordinates</param>
            <param name="worldPoint">(output) The corresponding world point.</param>
            <returns>The depth of the screen point in the range [0, 1]</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.ScreenToWorldPoint(OpenTK.Vector2d,OpenTK.Vector3d@)">
            <summary>
            Converts the specified screen point (in window coordinates -- origin at top left)
            to a world point in the OpenGL space.
            </summary>
            <param name="screenPoint">The screen point in the window coordinates</param>
            <param name="worldPoint">(output) The corresponding world point.</param>
            <returns>The depth of the screen point in the range [0, 1]</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.Matrix4dFromArray(System.Double[])">
            <summary>
            Constructs a Matrix4d matrix from the given array of doubles.
            </summary>
            <param name="array">The array of consecutive elements.</param>
            <returns>The corresponding Matrix4d instance.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetViewportArray">
            <summary>
            Obtains the OpenGL viewport array.
            </summary>
            <returns>The OpenGL viewport array.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetViewport">
            <summary>
            Obtains the OpenGL viewport rectangle.
            </summary>
            <returns>
            The rectangle with the same location and size as the one currently setup on OpenGL.
            </returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetProjectionMatrix">
            <summary>
            Obtains the current OpenGL projection matrix.
            </summary>
            <returns>The curren projection matrix.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetModelViewMatrix">
            <summary>
            Obtains the current OpenGL model view matrix.
            </summary>
            <returns>The curren model view matrix.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.ScreenPointToRay(System.Drawing.Point)">
            <summary>
            Converts the provided screen point to ray. The screen point should be
            in window coordinate system (origin at top left).
            </summary>
            <param name="screenPoint">The screen point</param>
            <returns>The corresponding ray of the screenpoint</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.ScreenPointToRay(OpenTK.Vector2d)">
            <summary>
            Converts the provided screen point to ray. The screen point should be
            in window coordinate system (origin at top left).
            </summary>
            <param name="screenPoint">The screen point</param>
            <returns>The corresponding ray of the screenpoint</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetGLMouseCoordinates(System.Drawing.Point)">
            <summary>
            Converts the specified mouse position from the window coordinate system to
            OpenGL window coordinate system (from origin at top left to origin at bottom left).
            </summary>
            <param name="mousePosition">The mouse position in window coordinate system.</param>
            <returns>The position in OpenGL window coordinate system.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetDepth(System.Drawing.Point)">
            <summary>
            Determines the depth of the point under the specified mouse cursor.
            </summary>
            <param name="mousePosition">The mouse position.</param>
            <returns>The depth value of the position.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetMinimumDepthValue">
            <summary>
            Gets the value representing the minimum depth value of the current OpenGL setup.
            </summary>
            <returns>The minimum depth value of the depth buffer.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetMaximumDepthValue">
            <summary>
            Gets the value representing the maximum depth value of the current OpenGL setup.
            </summary>
            <returns>The maximum depth value of the depth buffer.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.VectorComponentSelector(System.Int32,OpenTK.Vector3d)">
            <summary>
            Selects the vector component that corresponds to the specified index.
            </summary>
            <param name="i">The index</param>
            <param name="vector">The vector</param>
            <returns>X, Y or Z component if i=0, 1, 2 respectively.</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetMinVector3d(System.Collections.Generic.IEnumerable{OpenTK.Vector3d})">
            <summary>
            Determines the minimum Vector3d in a collection of vertices
            </summary>
            <param name="collection">The vertex collection</param>
            <returns>The minimum vector in the vertices</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetCentroidVector3d(System.Collections.Generic.IEnumerable{OpenTK.Vector3d})">
            <summary>
            Determines the centroid Vector3d in a collection of vertices
            </summary>
            <param name="collection">The vertex collection</param>
            <returns>The centroid vector in the vertices</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.GetMaxVector3d(System.Collections.Generic.IEnumerable{OpenTK.Vector3d})">
            <summary>
            Determines the maximum Vector3d in a collection of vertices
            </summary>
            <param name="collection">The vertex collection</param>
            <returns>The maximum vector in the vertices</returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.FindNonCollinearPoints(System.Collections.Generic.IEnumerable{OpenTK.Vector3d})">
            <summary>
            Finds 3 points in the provided list that are not collinear and will
            return a list containing those 3 points. If no non-collinear points
            were found, null will be returned.
            </summary>
            <param name="list">A list of points</param>
            <returns>
            A list of 3 non-collinear points or null (of no non-collinear points were found.
            </returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.AreCollinear(OpenTK.Vector3d,OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Determines whether 3 points are collinear.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
            <returns>
            True if the points are collinear, false otherwise.
            </returns>
        </member>
        <member name="M:CodeFull.Extensions.Helpers.FindFarthestPoints(System.Collections.Generic.IEnumerable{OpenTK.Vector3d})">
            <summary>
            Finds the two points with the maximum distance to each other in the
            specified list of points. In other words, will find the diagonal of a 
            polygon that is defined by the specified list.
            </summary>
            <param name="list">The list of points.</param>
            <returns>
            A pair of two points which are farthest from each other.
            </returns>
        </member>
        <member name="T:CodeFull.Graphics3D.AABB">
            <summary>
            Represents the axis-aligned bounding box of an object. This AABB
            rotates with the object but is axis-aligned in the object space.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics3D.Drawable3D">
            <summary>
            Defines the interface for objects that can be drawn using OpenGL
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Drawable3D.center">
            <summary>
            Internally stores the centroid of this drawable
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Drawable3D.transform">
            <summary>
            The collection of all transforms applied to this Drawable.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3D.CalculateCenter">
            <summary>
            A method to calculate the centroid of this Drawable
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3D.Draw">
            <summary>
            Draws the contents of this Drawable using OpenGL
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3D.HitTest(CodeFull.Graphics.Geometry.Ray)">
            <summary>
            Performs a ray casting hit test using the specified ray. 
            </summary>
            <param name="ray">The ray to perform hit test for</param>
            <returns>The result of the hit test (if any hit occurred), null otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3D.HitTest(System.Drawing.Point)">
            <summary>
            Performs a ray casting hit test using the specified point on the screen.
            By default, the screen point will be converted to a ray and the raycasting will be performed.
            Note that the ray will be transformed to the object's space.
            </summary>
            <param name="screenPoint">The screen point to perform hit test for</param>
            <returns>The result of the hit test (if any hit occurred), null otherwise.</returns>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3D.Attachments">
            <summary>
            Gets or sets the list of drawables attached to this CodeFull.Graphics.Drawable instance
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3D.Center">
            <summary>
            Gets the center point of this drawable
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3D.TransformedCenter">
            <summary>
            Gets the center point of this Drawable after performing all the transformations on.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3D.Transform">
            <summary>
            Gets or sets the collection of the transforms applied on this
            Drawable.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3D.Parent">
            <summary>
            The parent of this Drawable
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3D.AABB">
            <summary>
            Gets the axis-aligned bounding box of this Drawable.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3D.ShowAABB">
            <summary>
            Gets or sets the value indicating whether the AABB is rendered.
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.AABB.vertices">
            <summary>
            The vertices of this AABB. Winding order is clockwise
            starting from MinPoint to MinPoint, then move up, wind 
            clockwise again.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.AABB.#ctor(CodeFull.Graphics3D.Drawable3D,OpenTK.Vector3d,OpenTK.Vector3d,System.Drawing.Color)">
            <summary>
            Initializes a new AABB instance with the specified Drawable owner and
            the minimum and maximum points. The specified color will be used for drawing this AABB.
            </summary>
            <param name="owner">The owner of this AABB.</param>
            <param name="minPoint">The min point of this AABB.</param>
            <param name="maxPoint">The max point of this AABB.</param>
            <param name="color">The drawing color of this AABB.</param>
        </member>
        <member name="M:CodeFull.Graphics3D.AABB.#ctor(CodeFull.Graphics3D.Drawable3D,OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Initializes a new AABB instance with the specified Drawable owner and
            the minimum and maximum points. The default gizmo color will be used for
            drawing this AABB.
            </summary>
            <param name="owner">The owner of this AABB.</param>
            <param name="minPoint">The min point of this AABB.</param>
            <param name="maxPoint">The max point of this AABB.</param>
        </member>
        <member name="M:CodeFull.Graphics3D.AABB.ComputeVertices">
            <summary>
            Computes the other vertices of this bounding box.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.AABB.HitTest(CodeFull.Graphics.Geometry.Ray)">
            <summary>
            Tests for whether the specified ray hits this AABB or not. The 
            ray WILL NOT be modified and will be used as is. Make sure to pass
            the ray that will be in this AABB's space.
            </summary>
            <param name="ray">The Ray to perform the hit test for.</param>
            <returns>The result of the hit test, or null if no hit occurs.</returns>
        </member>
        <member name="P:CodeFull.Graphics3D.AABB.Color">
            <summary>
            Gets or sets the color of this AABB.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.AABB.MinPoint">
            <summary>
            The minimum point of this OBB
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.AABB.MaxPoint">
            <summary>
            The maximum point of this OBB
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.AABB.HalfPoints">
            <summary>
            The half-lengths of each direction
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.AABB.Diagonal">
            <summary>
            Gets the length of the diagonal of this bounding box.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.AABB.Volume">
            <summary>
            Gets the total volume of this bounding box.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.AABB.Vertices">
            <summary>
            Gets the list of vertices of this AABB. Winding order is clockwise
            starting from MinPoint to MinPoint, then move up, wind 
            clockwise again.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics3D.Arcball">
            <summary>
            Arcball is used to implement intuitive rotations using the mouse.
            This implementation is based on NeHe's implementation for C++
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Arcball.mousePosition">
            <summary>
            The last set mouse cursor position
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Arcball.clickStartVector">
            <summary>
            Start of the click vector (mapped to the sphere)
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Arcball.clickEndVector">
            <summary>
            End of the click vector (mapped to the sphere)
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Arcball.adjustedWidth">
            <summary>
            Adjusted mouse bounds width
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Arcball.adjustedHeight">
            <summary>
            Adjusted mouse bounds height
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Arcball.height">
            <summary>
            The height of the OpenGL canvas
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Arcball.buttonMapping">
            <summary>
            A mapping of the mouse button to their pressed status
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Instantiates a new Arcball with the specified boundaries
            for the width and height
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="sensitivity">The sensitivity of the trackball</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the operations that need to be performed when the mouse button
            is pressed.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the operations that need to be performed when the mouse button
            is released.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.MapToSphere(System.Drawing.Point)">
            <summary>
            Maps the given point to the sphere and returns the resulting vector
            </summary>
            <param name="point">The point to map to sphere</param>
            <returns>The vector of the mapped point</returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.SetBounds(System.Int32,System.Int32)">
            <summary>
            Set the boundaries of the mouse click
            </summary>
            <param name="width">The width boundary</param>
            <param name="height">The height boundary</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.SetMouseButtonStatus(System.Windows.Forms.MouseButtons,System.Boolean)">
            <summary>
            Sets the pressed status of the specified mouse button
            </summary>
            <param name="button">The mouse button to set</param>
            <param name="isPressed">The pressed status of that button</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.SetMousePosition(System.Drawing.Point)">
            <summary>
            Sets the start position of the mouse
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.GetRotation(System.Drawing.Point)">
            <summary>
            Calculate the rotation for the current point
            </summary>
            <param name="currentPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Arcball.ApplyTransforms(System.Drawing.Point)">
            <summary>
            Applies all the transformations possible based on the current status of mouse buttons
            </summary>
            <param name="currentCursorPosition">The current position of the mouse cursor</param>
        </member>
        <member name="P:CodeFull.Graphics3D.Arcball.Sensitivity">
            <summary>
            The sensitivity of this arcball (default is 0.01)
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Arcball.Drawable">
            <summary>
            The drawable that this arcball instance performs on
            </summary>
        </member>
        <member name="T:CodeFull.Graphics3D.Drawable3DCollection">
            <summary>
            A collection of Drawable objects
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Drawable3DCollection.collection">
            <summary>
            The underlying collection of the drawables
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Drawable3DCollection.owner">
            <summary>
            The owner of this collection
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.#ctor(CodeFull.Graphics3D.Drawable3D)">
            <summary>
            Creates a new DrawableCollection instance using the specified drawable as the owner.
            </summary>
            <param name="owner">The ownder of this drawable.</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.Add(CodeFull.Graphics3D.Drawable3D)">
            <summary>
            Add a new Drawable to this collection.
            </summary>
            <param name="item">The Drawable instance to add.</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.Clear">
            <summary>
            Clear this collection.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.Contains(CodeFull.Graphics3D.Drawable3D)">
            <summary>
            Determines whether the specified Drawable instance exists in this
            DrawableCollection.
            </summary>
            <param name="item">The Drawable instance to look for.</param>
            <returns>true if the collection contains the specified Drawable. false otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.CopyTo(CodeFull.Graphics3D.Drawable3D[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.Remove(CodeFull.Graphics3D.Drawable3D)">
            <summary>
            Removes the specified item from this collection (if it exists).
            </summary>
            <param name="item">The Drawable to remove.</param>
            <returns>true if the specified Drawable existed and was removed. false otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.GetEnumerator">
            <summary>
            Gets the enumerator of this collection.
            </summary>
            <returns>This collections enumerator.</returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.IndexOf(CodeFull.Graphics3D.Drawable3D)">
            <summary>
            Determines the index of the specified Drawable in this collection.
            </summary>
            <param name="item">The Drawable.</param>
            <returns>The index of the Drawable if it exists in this collection. -1 otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.Insert(System.Int32,CodeFull.Graphics3D.Drawable3D)">
            <summary>
            Inserts the speicfied Drawable at the specified index in this collection.
            </summary>
            <param name="index">The place to insert the Drawable.</param>
            <param name="item">The Drawable to insert.</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Drawable3DCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the Drawable instance at the specified index.
            </summary>
            <param name="index">The index of the Drawable to remove.</param>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3DCollection.Count">
            <summary>
            Gets the number of Drawables in this collection.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3DCollection.IsReadOnly">
            <summary>
            Gets the value determining whether this collection is read only or not.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Drawable3DCollection.Item(System.Int32)">
            <summary>
            Gets or sets the Drawbale at the specified index in this collection.
            </summary>
            <param name="index">The access index.</param>
            <returns>The Drawable at the specified index.</returns>
        </member>
        <member name="T:CodeFull.Graphics3D.Mesh">
            <summary>
            Represents a mesh built using vertices and triangle indices that can be
            rendered in OpenGL, manipulated in C# and be the subject of CSG operations
            in Carve
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Mesh.idGen">
            <summary>
            Internal ID counter for meshes
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Mesh.vertices">
            <summary>
            The vertices of this mesh
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Mesh.colors">
            <summary>
            The color array of this mesh
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Mesh.revLookup">
            <summary>
            A lookup table for mapping face ID to triangle vertices
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Mesh.triangleIndices">
            <summary>
            The triangle indices of this mesh
            </summary>
        </member>
        <member name="F:CodeFull.Graphics3D.Mesh.handle">
            <summary>
            The OpenGL handles
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.GetTransformedVertices">
            <summary>
            Calculates the array of vertices of this mesh after applying
            the transforms applied to this mesh.
            </summary>
            <returns>The transformed vertices of this mesh</returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.#ctor(OpenTK.Vector3d[],System.Int32[],System.UInt32[])">
            <summary>
            Initializes a new mesh.
            </summary>
            <param name="vertices">The vertex coordinates of this mesh</param>
            <param name="triangleIndices">The face triangle indices of this mesh</param>
            <param name="colors">Vertex colors of this mesh</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.ComputeAABB">
            <summary>
            Computes the axis-aligned bounding box of this mesh.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.CalculateCenter">
            <summary>
            Calculates the center point of this mesh
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.Init">
            <summary>
            Registers the handles VBO of this mesh with OpenGL and initializes the data.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.Draw">
            <summary>
            Draws the mesh using OpenGL. The method must be called in a drawing context (after setting
            the view properties and performing clearing)
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.HitTest(CodeFull.Graphics.Geometry.Ray)">
            <summary>
            Performs a ray casting hit test using the specified ray. This function does not
            take the ray into its own space! Thus make sure the ray is specified in the space of this
            object (with proper transforms applied to it).
            </summary>
            <param name="ray">The ray to perform hit test for</param>
            <returns>The result of the hit test if anything occurred. null otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.SaveMesh(System.String)">
            <summary>
            Saves this mesh into a PLY format
            </summary>
            <param name="path">The path to the file to save this mesh to</param>
        </member>
        <member name="M:CodeFull.Graphics3D.Mesh.LoadFromPLYFile(System.String)">
            <summary>
            Creates a mesh by parsing a PLY file
            </summary>
            <param name="path">The path to the PLY mesh file</param>
            <returns>A mesh corresponding to the information in the PLY file</returns>
        </member>
        <member name="P:CodeFull.Graphics3D.Mesh.Vertices">
            <summary>
            Gets the array of vertices of this mesh
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Mesh.Colors">
            <summary>
            Gets the array of colors of this mesh
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Mesh.HasColor">
            <summary>
            Gets the value indicating whether this mesh has vertex colors
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Mesh.TriangleIndices">
            <summary>
            Gets the array of triangle indices of this mesh
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Mesh.ID">
            <summary>
            An arbitrary ID string associated with this mesh
            </summary>
        </member>
        <member name="P:CodeFull.Graphics3D.Mesh.Triangles">
            <summary>
            Gets the collection of all the triangles of this Mesh.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics3D.MeshHitTestResult">
            <summary>
            Represents a result of a hit test between a ray and a triangular mesh.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.HitTestResult">
            <summary>
            Represents the generalized result of a hit test performed on a Drawable. The hit test
            can be either performed in 2D or 3D.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.HitTestResult.#ctor(CodeFull.Graphics3D.Drawable3D,OpenTK.Vector3d)">
            <summary>
            Instantiates a new HitTestResult instance on the specified Drawable with the 
            specified hit point.
            </summary>
            <param name="drawable">The hit Drawable.</param>
            <param name="hitPoint">The point of hit.</param>
        </member>
        <member name="M:CodeFull.Graphics.HitTestResult.#ctor(CodeFull.Graphics3D.Drawable3D,OpenTK.Vector2d)">
            <summary>
            Instantiates a new HitTestResult instance on the specified Drawable with the 
            specified hit point.
            </summary>
            <param name="drawable">The hit Drawable.</param>
            <param name="hitPoint">The point of hit.</param>
        </member>
        <member name="P:CodeFull.Graphics.HitTestResult.Drawable">
            <summary>
            The drawable that was hit by the ray
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.HitTestResult.HitPoint">
            <summary>
            A set of triangle vertices that intersect the ray
            </summary>
        </member>
        <member name="M:CodeFull.Graphics3D.MeshHitTestResult.#ctor(CodeFull.Graphics3D.Drawable3D,OpenTK.Vector3d,CodeFull.Graphics.Geometry.Triangle)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="drawable">The Drawable instance that was hit.</param>
            <param name="hitPoint">The hit point.</param>
            <param name="triangleHit">The triangle that was hit.</param>
        </member>
        <member name="P:CodeFull.Graphics3D.MeshHitTestResult.TriangleHit">
            <summary>
            Gets the triangle that was hit by the specified ray.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Camera">
            <summary>
            Represents a camera in OpenGL
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Camera.#ctor(OpenTK.Vector3d,OpenTK.Vector3d,OpenTK.Vector3d,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new Camera instance.
            </summary>
            <param name="positon">The world position of the camera.</param>
            <param name="lookAt">The direction of the camera.</param>
            <param name="up">The up direction of the camera (usually (0, 1, 0)).</param>
            <param name="fieldOfView">The field of view of the camera in degrees.</param>
            <param name="nearClip">The near clipping distance of the camera.</param>
            <param name="farClip">The far clipping distance of the camera.</param>
        </member>
        <member name="M:CodeFull.Graphics.Camera.#ctor">
            <summary>
            Creates a new Camera instance located on the origin of the world space, looking at (0, 0, 0) with
            the unit Y axis specified as the up direction, with 45 degrees field of view and 0.5 and 10
            specified as the near clipping and far clipping distances respectively.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Camera.CreateModelViewMatrix">
            <summary>
            Creates the model view matrix based on the camera setup.
            </summary>
            <returns>The model view matrix.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Camera.GetDistanceTo(OpenTK.Vector3d)">
            <summary>
            Gets the distance of this camera to the specified point.
            </summary>
            <param name="point">The point to calculate the distance to.</param>
            <returns>The distance of this camera to the point.</returns>
        </member>
        <member name="P:CodeFull.Graphics.Camera.MainCamera">
            <summary>
            Gets or sets the main viewing camera of OpenGL
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Camera.Position">
            <summary>
            Gets or sets the position of this camera in 3D space
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Camera.LookAt">
            <summary>
            Gets or sets the point in 3D space that this camera is looking at
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Camera.Up">
            <summary>
            Gets or sets the up direction of this camera
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Camera.FieldOfView">
            <summary>
            Gets or sets the field of view of this camera (in degrees)
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Camera.NearClip">
            <summary>
            Camera's near clipping distance
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Camera.FarClip">
            <summary>
            Camera's far clipping distance
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Geometry.Line.ORTHOGONALITY_TOLERANCE">
            <summary>
            Tolerance for orthogonality check. (This tolerance results in a very loose check)
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Geometry.Line.PARALLELISM_TOLERANCE">
            <summary>
            Tolerance for parallelism check.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Line.#ctor(OpenTK.Vector3d,OpenTK.Vector3d,System.Boolean)">
            <summary>
            Constructs a new line using either a point and a direction vector or
            using two points.
            </summary>
            <param name="point">The point on the line.</param>
            <param name="vectorOrPoint">Either the vector of the line or another point on the line</param>
            <param name="isDirection">Determines whether the second argument was the direction vector or not.</param>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Line.SquaredDistanceTo(OpenTK.Vector3d)">
            <summary>
            Computes the squared distance between the specified point and this line
            (Adapted from http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html)
            </summary>
            <param name="point">The point to calculate the distance to</param>
            <returns>The squared distance of the point to this line.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Line.DistanceTo(OpenTK.Vector3d)">
            <summary>
            Computes the distance between the specified point and this line
            (Adapted from http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html)
            </summary>
            <param name="point">The point to calculate the distance to</param>
            <returns>The distance of the point to this line.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Line.LeastSquaresFit(System.Collections.Generic.IEnumerable{OpenTK.Vector3d})">
            <summary>
            Computes the 3D Orthogonal Distance Regression (ODR) line for the
            3D points in the provided collection.
            </summary>
            <param name="collection">The collection to process</param>
            <returns>The 3D ODR line.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Line.IsOrthogonalTo(CodeFull.Graphics.Geometry.Line)">
            <summary>
            Determines whether this line is orthogonal to the specified line.
            </summary>
            <param name="other">The other line.</param>
            <returns>True if the lines are orthogonal, false otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Line.IsParallelTo(CodeFull.Graphics.Geometry.Line)">
            <summary>
            Determines whether this line is parallel to the specified line.
            </summary>
            <param name="other">The other line.</param>
            <returns>True if the lines are parallel, false otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Line.AngleBetween(CodeFull.Graphics.Geometry.Line)">
            <summary>
            Computes the angle between this line and another line in radians.
            </summary>
            <param name="other">The other line.</param>
            <returns>The angle in the range 0 ≤ θ ≤ π</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Line.AngleBetween(CodeFull.Graphics.Geometry.Ray)">
            <summary>
            Computes the angle between this line and a ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The angle in the range 0 ≤ θ ≤ π</returns>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Line.Point">
            <summary>
            Gets or sets the point of this line.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Line.Direction">
            <summary>
            Gets or sets the normalized direction of this line.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Geometry.LineSegment">
            <summary>
            Represents a line segment in 3D space
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.LineSegment.#ctor(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Initializes a new line segments using the provided end points.
            </summary>
            <param name="point1">The first endpoint.</param>
            <param name="point2">The second endpoint.</param>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.LineSegment.IntersectionWith(CodeFull.Graphics.Geometry.Line)">
            <summary>
            Performs intersection test between this line segment and the specified line.
            Test adapted from https://www.codefull.org/2015/06/intersection-of-a-ray-and-a-line-segment-in-3d/
            </summary>
            <param name="line">The line</param>
            <returns>If intersection occurs, the point of intersection. null otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.LineSegment.IntersectionWith(CodeFull.Graphics.Geometry.Ray)">
            <summary>
            Performs intersection test between this line segment and the specified ray.
            Test adapted from https://www.codefull.org/2015/06/intersection-of-a-ray-and-a-line-segment-in-3d/
            </summary>
            <param name="ray">The ray</param>
            <returns>If intersection occurs, the point of intersection. null otherwise.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.LineSegment.IntersectionWith(OpenTK.Vector3d)">
            <summary>
            Performs intersection test between this line segment and the provided point.
            In other words, determines whether the poin lies on this line segment or not.
            </summary>
            <param name="point">The point</param>
            <returns>If intersection occurs, the point of intersection. null otherwise.</returns>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.LineSegment.EndPoint">
            <summary>
            Gets or sets the end point of this line segment.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.LineSegment.Center">
            <summary>
            Gets the center point of this line segment.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.LineSegment.Length">
            <summary>
            Gets the length of this line segment.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.LineSegment.LengthSquared">
            <summary>
            Gets the squared length of this line segment.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Geometry.Plane">
            <summary>
            Represents a plane in 3D space.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Plane.#ctor(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Initializes a new plane using the given point and normal.
            </summary>
            <param name="point">A point on the plane</param>
            <param name="normal">A </param>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Plane.#ctor(OpenTK.Vector3d,OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Constructs a new plane using three (non-collinear) points.
            If there are repeated points, or the three points are collinear
            ArgumentException will be thrown.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="point3">The third point.</param>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Plane.SignedDistanceTo(OpenTK.Vector3d)">
            <summary>
            Calculates the signed distance of this plane to the specified point.
            </summary>
            <param name="point">The point to calculate the distance from.</param>
            <returns>The signed distance between the point and this plane.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Plane.AbsoluteDistanceTo(OpenTK.Vector3d)">
            <summary>
            Calculates the unsigned (absolute) distance of this plane to the specified point.
            </summary>
            <param name="point">The point to calculate the distance from.</param>
            <returns>The unsigned (absolute) distance between the point and this plane.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Plane.Project(OpenTK.Vector3d)">
            <summary>
            Computes the orthogonal projection of the specified point on this plane.
            http://mathworld.wolfram.com/Projection.html
            </summary>
            <param name="point">The point.</param>
            <returns>The projected point on this plane.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Plane.FitPlane(System.Collections.Generic.IEnumerable{OpenTK.Vector3d})">
            <summary>
            Fits a 3D plane to the specified list of 3D points.
            </summary>
            <param name="collection">A collection of points to fit a 3D plane to.</param>
            <returns>The calculated best fit plane. Will return null if no such plane exists.</returns>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Plane.Point">
            <summary>
            The point on the plane.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Plane.Normal">
            <summary>
            The normal of the plane.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Geometry.Ray">
            <summary>
            Represents a ray with origin an direction
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Ray.#ctor(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Creates a new ray using the specified origin and end point.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="endPoint">The end point of the ray.</param>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Ray.DoTransform(CodeFull.Graphics.Transform.Transform3D)">
            <summary>
            Transforms this ray instance using the specified Transform3D.
            </summary>
            <param name="transform">The transform to apply to this ray.</param>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Ray.DoTransform(OpenTK.Matrix4d)">
            <summary>
            Transforms this ray instance using the specified transformation matrix.
            </summary>
            <param name="matrix">The transformation matrix to apply to this ray.</param>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Ray.GetPointOnRay(System.Double)">
            <summary>
            Computes the point on ray given the multiplier "t" such that:
            result = o + dt
            </summary>
            <param name="t">The placement multiplier</param>
            <returns>The corresponding point on the ray</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Ray.SquaredDistance(OpenTK.Vector3d)">
            <summary>
            Computes the distance between the specified point and this ray
            (if this ray is treated as a line).
            (Adapted from http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html)
            </summary>
            <param name="point">The point to calculate the distance to</param>
            <returns>The SQUARED distance of the point to this ray.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Ray.ToObjectSpace(CodeFull.Graphics3D.Drawable3D)">
            <summary>
            Constructs a new ray that is expressed in terms of the object's trasnfomrs.
            This method is usefull for ray casting.
            </summary>
            <param name="drawable">The object to use</param>
            <returns>A new ray inverted by the transform of the object.</returns>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Ray.Origin">
            <summary>
            Gets or sets the origin of this ray
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Ray.EndPoint">
            <summary>
            Gets or sets the end point of this ray
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Ray.Direction">
            <summary>
            Gets the normalized direction of this ray
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Geometry.Triangle">
            <summary>
            Represens a triangle in 3D space with its 3 vertices
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Geometry.Triangle.e1">
            <summary>
            Edge #1 used for ray-triangle intersection tests
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Geometry.Triangle.e2">
            <summary>
            Edge #2 used for ray-triangle intersection tests
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Geometry.Triangle.a">
            <summary>
            The first vertex of the triangle
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Geometry.Triangle.b">
            <summary>
            The second vertex of the triangle
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Geometry.Triangle.c">
            <summary>
            The third vertex of the triangle
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Triangle.ToBlittableArray">
            <summary>
            Converts the information of this triangle into a blitted
            double[] array. The sequence is A, B, C, e1, e2, Normal)
            </summary>
            <returns>A double[] array containing this triangle's information.</returns>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Triangle.CalculateNormal">
            <summary>
            Calculates the normal of this triangle
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Triangle.#ctor(OpenTK.Vector3d,OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Creates a new Triangle instance using the specified vertices.
            </summary>
            <param name="a">The first vertex of the triangle.</param>
            <param name="b">The second vertex of the triangle.</param>
            <param name="c">The third vertex of the triangle.</param>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Triangle.#ctor">
            <summary>
            Creates a new Triangle instance with all vertices set to zero.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Geometry.Triangle.IntersectionWith(CodeFull.Graphics.Geometry.Ray)">
            <summary>
            Intersection test between a triangle and a ray based on Moller-Trumbore algorithm
            (see: http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm)
            </summary>
            <param name="ray">The ray to test for intersections</param>
            <returns>The point of intersection (if intersection occurs). null otherwise.</returns>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Triangle.A">
            <summary>
            Gets or sets the first vertex of the traignle
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Triangle.B">
            <summary>
            Gets or sets the second vertex of the traignle
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Triangle.C">
            <summary>
            Gets or sets the third vertex of the traignle
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Geometry.Triangle.Normal">
            <summary>
            Gets the normal of this triangle. The vector is normalized.
            </summary>
        </member>
        <member name="T:CodeFull.Geometry.TriangleCollection">
            <summary>
            Represents a collection of renderable triangles.
            </summary>
        </member>
        <member name="F:CodeFull.Geometry.TriangleCollection.triangles">
            <summary>
            The list of triangles in this collection
            </summary>
        </member>
        <member name="M:CodeFull.Geometry.TriangleCollection.#ctor(OpenTK.Vector3d[],System.Int32[])">
            <summary>
            Initializes a new TriangleCollection object with the specified vertices array
            and indices array.
            </summary>
            <param name="vertices">The vertices array.</param>
            <param name="triangleIndices">The triangle indices array.</param>
        </member>
        <member name="M:CodeFull.Geometry.TriangleCollection.PopulateList">
            <summary>
            Populates the list of triangles in this collection.
            </summary>
        </member>
        <member name="M:CodeFull.Geometry.TriangleCollection.Blit">
            <summary>
            Blits the triangles into the BlittedList property.
            </summary>
        </member>
        <member name="P:CodeFull.Geometry.TriangleCollection.Vertices">
            <summary>
            Gets the vertices array of this collection.
            </summary>
        </member>
        <member name="P:CodeFull.Geometry.TriangleCollection.Indices">
            <summary>
            Gets the index array of this collection.
            </summary>
        </member>
        <member name="P:CodeFull.Geometry.TriangleCollection.Count">
            <summary>
            Gets the number of triangles in this collection.
            </summary>
        </member>
        <member name="P:CodeFull.Geometry.TriangleCollection.BlittedList">
            <summary>
            Gets the list of triangles in this collection in a blitted format.
            </summary>
        </member>
        <member name="P:CodeFull.Geometry.TriangleCollection.Item(System.Int32)">
            <summary>
            Gets the triangle at the specified index.
            </summary>
            <param name="index">The index of the element to access</param>
            <returns>The triangle at the specified index.</returns>
        </member>
        <member name="T:CodeFull.Graphics.Gizmos">
            <summary>
            A static class that is used for setting various gizmo properties (such as the color of
            the bounding boxes, or whether gizmos should be rendered at all).
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Gizmos.showAABB">
            <summary>
            Backing storage for the ShowAABB property.
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Gizmos.aabbColor">
            <summary>
            The backing storage for the AABBColor property.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Gizmos.ShowAABB">
            <summary>
            Gets or sets the flag indicating whether the AABB should
            be rendered for objects or not.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Gizmos.AABBColor">
            <summary>
            Gets or sets the default color of the AABB's.
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Transform.EulerRotateTransform3D">
            <summary>
            Represents a 3D euler angle rotation transform
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Transform.Transform3D">
            <summary>
            Defines the parent class of all 3D transforms that can be applied to 3D objects
            such as translation, rotation and scaling.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3D.Transform(OpenTK.Vector3d)">
            <summary>
            Transforms the given 3D vector by this Transform3D
            </summary>
            <param name="vector">The vector to be transformed</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3D.Transform(OpenTK.Vector4d)">
            <summary>
            Transforms the given 4D vector by this Transform3D
            </summary>
            <param name="vector">The vector to be transformed</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3D.Clone">
            <summary>
            Deep clone this Transform3D instance
            </summary>
            <returns>A deep clone of this Transform3D instnace</returns>
        </member>
        <member name="P:CodeFull.Graphics.Transform.Transform3D.Identity">
            <summary>
            Gets the identity transformation.
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.Transform3D.Value">
            <summary>
            Gets the value of this transform in Matrix4d format
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.EulerRotateTransform3D.#ctor">
            <summary>
            Initializes a new instance of EulerRotateTransform3D class
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.EulerRotateTransform3D.#ctor(System.Double,System.Double,System.Double,OpenTK.Vector3d)">
            <summary>
            Initializes a new instance of EulerRotateTransform3D class with the specified
            rotation angles and the specified center
            </summary>
            <param name="angleX">The X angle</param>
            <param name="angleY">The Y angle</param>
            <param name="angleZ">The Z angle</param>
            <param name="center">The center of the transformation</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.EulerRotateTransform3D.#ctor(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Initializes a new instance of EulerRotateTransform3D class with the specified
            rotation angles and the specified center
            </summary>
            <param name="angle">The rotation angles in vector format</param>
            <param name="center">The center of the transformation</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.EulerRotateTransform3D.Clone">
            <summary>
            Creates a deep clone of this EulerRotateTransform3D instance
            </summary>
            <returns>A deep clone of this transform</returns>
        </member>
        <member name="P:CodeFull.Graphics.Transform.EulerRotateTransform3D.AngleX">
            <summary>
            The X angle
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.EulerRotateTransform3D.AngleY">
            <summary>
            The Y angle
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.EulerRotateTransform3D.AngleZ">
            <summary>
            The Z angle
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.EulerRotateTransform3D.Center">
            <summary>
            The center point of this rotation transform
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.EulerRotateTransform3D.Angle">
            <summary>
            Gets or sets the angle values of this rotation transform
            in a vector format
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.EulerRotateTransform3D.Value">
            <summary>
            Gets the value of this transform in Matrix4d format
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Transform.MatrixTransform3D">
            <summary>
            Represents a 3D matrix transform 
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.MatrixTransform3D.#ctor">
            <summary>
            Initializes a new instance of MatrixTransform3D class with identity transformation
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.MatrixTransform3D.#ctor(OpenTK.Matrix4d)">
            <summary>
            Initializes a new instance of MatrixTransform3D class with the specified matrix
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.MatrixTransform3D.Clone">
            <summary>
            Creates a deep clone of this MatrixTransform3D instance
            </summary>
            <returns>A deep clone of this transform</returns>
        </member>
        <member name="P:CodeFull.Graphics.Transform.MatrixTransform3D.Matrix">
            <summary>
            Gets or sets the transformation matrix of this MatrixTransform3D instance
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.MatrixTransform3D.Value">
            <summary>
            Gets the value of this transform in Matrix4d format
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Transform.QuaternionRotateTransform3D">
            <summary>
            Represents a 3D rotation transform by a quaternion
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.QuaternionRotateTransform3D.#ctor">
            <summary>
            Initializes a new instance of QuaternionRotateTransform3D class with identity rotation
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.QuaternionRotateTransform3D.#ctor(OpenTK.Quaterniond,OpenTK.Vector3d)">
            <summary>
            Initializes a new instance of QuaternionRotateTransform3D class with the specified
            rotation and center
            </summary>
            <param name="rotation"></param>
            <param name="center"></param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.QuaternionRotateTransform3D.Clone">
            <summary>
            Creates a deep clone of this QuaternionRotateTransform3D instance
            </summary>
            <returns>A deep clone of this transform</returns>
        </member>
        <member name="P:CodeFull.Graphics.Transform.QuaternionRotateTransform3D.Rotation">
            <summary>
            Gets or sets the rotation of this QuaternionRotateTransform3D
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.QuaternionRotateTransform3D.Center">
            <summary>
            The center point of this rotation transform
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.QuaternionRotateTransform3D.Value">
            <summary>
            Gets the value of this transform in Matrix4d format
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Transform.ScaleTransform3D">
            <summary>
            Represents a 3D scaling transform
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.ScaleTransform3D.#ctor">
            <summary>
            Initializes a new instance of ScaleTransform3D class with identity scale
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.ScaleTransform3D.#ctor(System.Double,System.Double,System.Double,OpenTK.Vector3d)">
            <summary>
            Initializes a new instance of ScaleTransform3D class with the provided scales
            and the center
            </summary>
            <param name="scaleX">The X scale</param>
            <param name="scaleY">The X scale</param>
            <param name="scaleZ">The X scale</param>
            <param name="center">The center of the transform</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.ScaleTransform3D.#ctor(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Initializes a new instance of ScaleTransform3D class with the provided scales
            and the center
            </summary>
            <param name="scale">The scale values in vector format</param>
            <param name="center">The center of the transform</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.ScaleTransform3D.Clone">
            <summary>
            Creates a deep clone of this ScaleTransform3D instance
            </summary>
            <returns>A deep clone of this transform</returns>
        </member>
        <member name="P:CodeFull.Graphics.Transform.ScaleTransform3D.ScaleX">
            <summary>
            The X scale
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.ScaleTransform3D.ScaleY">
            <summary>
            The Y scale
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.ScaleTransform3D.ScaleZ">
            <summary>
            The Z scale
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.ScaleTransform3D.Center">
            <summary>
            The center point of this scale transform
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.ScaleTransform3D.Scale">
            <summary>
            Gets or sets the scale values of this scale transform
            in a vector format
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.ScaleTransform3D.Value">
            <summary>
            Gets the value of this transform in Matrix4d format
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Transform.Transform3DGroup">
            <summary>
            Represents a combination of multiple CodeFull.Graphics.Transform.Transform3D
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.#ctor">
            <summary>
            Initializes a new instance of CodeFull.Graphics.Transform.Transform3D class.
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.GetTransforms``1">
            <summary>
            Gets all the child transforms of the specified type
            </summary>
            <typeparam name="T">The type of the transform to look for (must be a subclass of Transform3D)</typeparam>
            <returns>A list of all the transforms of the specified type in the children of this instance</returns>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.TranslateBy(CodeFull.Graphics.Transform.TranslateTransform3D)">
            <summary>
            Translates this Tranform3D instance by the specified TranslateTransform3D instance.
            </summary>
            <param name="translate">The translation to be applied</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.TranslateBy(System.Double,System.Double,System.Double)">
            <summary>
            Translates this Tranform3D instance by the specified offsets
            </summary>
            <param name="offsetX">The X offset</param>
            <param name="offsetY">The Y offset</param>
            <param name="offsetZ">The Z offset</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.TranslateBy(OpenTK.Vector3d)">
            <summary>
            Translates this Tranform3D instance by the offsets specified by the Vector3d instance
            </summary>
            <param name="offset">The offsets of each axis in a vector format</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetTranslation(CodeFull.Graphics.Transform.TranslateTransform3D)">
            <summary>
            Sets the traslation of this Tranform3D instance to the specified TranslateTransform3D instance.
            </summary>
            <param name="translate">The translation to be applied</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Sets the traslation of this Tranform3D instance to the specified offsets
            </summary>
            <param name="offsetX">The X offset</param>
            <param name="offsetY">The Y offset</param>
            <param name="offsetZ">The Z offset</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetTranslation(OpenTK.Vector3d)">
            <summary>
            Sets the traslation of this Tranform3D instance to the specified Vector3d instance
            </summary>
            <param name="offset">The offsets of each axis in a vector format</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.RotateBy(CodeFull.Graphics.Transform.EulerRotateTransform3D)">
            <summary>
            Rotates this Tranform3D instance by the specified RotateTransform3D instance.
            </summary>
            <param name="rotation">The rotation to be applied</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.RotateBy(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Rotates this Tranform3D instance by the angles specified by the Vector3d instance and around
            the specified center
            </summary>
            <param name="angle">The angles of each axis in a vector format</param>
            <param name="center">The center of the rotation transform</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.RotateBy(System.Double,System.Double,System.Double,OpenTK.Vector3d)">
            <summary>
            Rotates this Tranform3D instance by the specified angles
            </summary>
            <param name="angleX">The X angle</param>
            <param name="angleY">The Y angle</param>
            <param name="angleZ">The Z angle</param>
            <param name="center">The center of the rotation</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetRotation(CodeFull.Graphics.Transform.EulerRotateTransform3D)">
            <summary>
            Sets the rotation of this Tranform3D instance to the specified RotateTransform3D instance.
            </summary>
            <param name="rotation">The rotation to be applied</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetRotation(System.Double,System.Double,System.Double,OpenTK.Vector3d)">
            <summary>
            Sets the rotation of this Tranform3D instance to the specified angles
            </summary>
            <param name="angleX">The X angle</param>
            <param name="angleY">The Y angle</param>
            <param name="angleZ">The Z angle</param>
            <param name="center">The center of the rotation</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetRotation(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Sets the rotation of this Tranform3D instance to the specified Vector3d instance
            </summary>
            <param name="offset">The angle of each axis in a vector format</param>
            <param name="center">The center of the rotation</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.ScaleBy(CodeFull.Graphics.Transform.ScaleTransform3D)">
            <summary>
            Scales this Tranform3D instance by the specified ScaleTransform3D instance.
            </summary>
            <param name="scale">The scale to be applied</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.ScaleBy(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Scales this Tranform3D instance by the amounts specified by the Vector3d instance and around
            the specified center
            </summary>
            <param name="scale">The scales of each axis in a vector format</param>
            <param name="center">The center of the scale transform</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.ScaleBy(System.Double,System.Double,System.Double,OpenTK.Vector3d)">
            <summary>
            Scale this Tranform3D instance by the specified amounts
            </summary>
            <param name="scaleX">The X scale</param>
            <param name="scaleY">The Y scale</param>
            <param name="scaleZ">The Z scale</param>
            <param name="center">The center of the scaling</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetScale(CodeFull.Graphics.Transform.ScaleTransform3D)">
            <summary>
            Sets the scale of this Tranform3D instance to the specified ScaleTransform3D instance.
            </summary>
            <param name="scale">The scale to be applied</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetScale(System.Double,System.Double,System.Double,OpenTK.Vector3d)">
            <summary>
            Sets the scale of this Tranform3D instance to the specified offsets
            </summary>
            <param name="scaleX">The X scale</param>
            <param name="scaleY">The Y scale</param>
            <param name="scaleZ">The Z scale</param>
            <param name="center">The center of the scale</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.SetScale(OpenTK.Vector3d,OpenTK.Vector3d)">
            <summary>
            Sets the scale of this Tranform3D instance to the specified Vector3d instance
            </summary>
            <param name="offset">The scale of each axis in a vector format</param>
            <param name="center">The center of the scale</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.Transform3DGroup.Clone">
            <summary>
            Creates a deep clone of this Transform3DGroup instance with all of its children
            </summary>
            <returns>A deep clone of this transform</returns>
        </member>
        <member name="P:CodeFull.Graphics.Transform.Transform3DGroup.Children">
            <summary>
            Gets or sets the children of this Transform3DGroup instance
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.Transform3DGroup.Value">
            <summary>
            Gets the result of the combination of all Transform3D's in this Transform3DGroup
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Transform.TranslateTransform3D">
            <summary>
            Represents a 3D translation transform
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.TranslateTransform3D.#ctor">
            <summary>
            Initializes a new instance of TranslateTransform3D class
            </summary>
        </member>
        <member name="M:CodeFull.Graphics.Transform.TranslateTransform3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of TranslateTransform3D class with the specified
            offsets
            </summary>
            <param name="offsetX">The X offset</param>
            <param name="offsetY">The Y offset</param>
            <param name="offsetZ">The Z offset</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.TranslateTransform3D.#ctor(OpenTK.Vector3d)">
            <summary>
            Initializes a new instance of TranslateTransform3D class with the specified
            offset values in a vector format
            </summary>
            <param name="offset">The offset of the translation</param>
        </member>
        <member name="M:CodeFull.Graphics.Transform.TranslateTransform3D.Clone">
            <summary>
            Creates a deep clone of this TranslateTransform3D instance
            </summary>
            <returns>A deep clone of this transform</returns>
        </member>
        <member name="P:CodeFull.Graphics.Transform.TranslateTransform3D.OffsetX">
            <summary>
            The X offset
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.TranslateTransform3D.OffsetY">
            <summary>
            The Y offset
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.TranslateTransform3D.OffsetZ">
            <summary>
            The Z offset
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.TranslateTransform3D.Offset">
            <summary>
            Gets or sets the offset values of this translation transform
            in a vector format
            </summary>
        </member>
        <member name="P:CodeFull.Graphics.Transform.TranslateTransform3D.Value">
            <summary>
            Gets the value of this transform in Matrix4d format
            </summary>
        </member>
        <member name="T:CodeFull.Graphics.Vbo">
            <summary>
            Represents the required VBO handles
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Vbo.vertexId">
            <summary>
            The vertex buffer handle
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Vbo.colorId">
            <summary>
            The color buffer handle
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Vbo.faceId">
            <summary>
            The face arrays handle
            </summary>
        </member>
        <member name="F:CodeFull.Graphics.Vbo.numElements">
            <summary>
            Number of elements in this VBO
            </summary>
        </member>
    </members>
</doc>
